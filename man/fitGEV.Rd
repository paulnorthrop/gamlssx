% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fitGEV.R
\name{fitGEV}
\alias{fitGEV}
\title{Fit a Generalized extreme value (GEV) GAMLSS}
\usage{
fitGEV(
  formula,
  data,
  scoring = c("fisher", "quasi"),
  stepLength = 1,
  stepAttempts = 2,
  stepReduce = 2,
  eps,
  ...
)
}
\arguments{
\item{formula}{a formula object, with the response on the left of an ~ operator, and the terms, separated by \eqn{+}{+} operators, on the right.
  Nonparametric smoothing terms are indicated by \code{pb()} for penalised beta splines, \code{cs} for smoothing splines, \code{lo} for \code{loess} smooth terms and \code{random} or \code{ra}
  for random terms, e.g. \code{y~cs(x,df=5)+x1+x2*x3}.  Additional smoothers can be added by creating the appropriate interface.
  Interactions with nonparametric smooth terms are not fully supported, but will not produce errors;
  they will simply produce the usual parametric interaction 
  }

\item{data}{a data frame containing the variables occurring in the formula, e.g. \code{data=aids}. If this is missing, the variables should be on the search list.}

\item{scoring}{A character scalar. If \code{scoring = "fisher"} then the weights
used in the fitting algorithm are based on the expected Fisher
information, that is, a Fisher's scoring algorithm is used.
If \verb{scoring = "quasi} then these weights are based on the cross products
of the first derivatives of the log-likelihood, leading to a quasi Newton
scoring algorithm.}

\item{stepLength}{A numeric vector containing positive values. The initial
values of the step lengths \code{mu.step}, \code{sigma.step} and \code{nu.step} passed to
\code{\link[gamlss:gamlss.control]{gamlss.control}} in the first attempt to fit
the model by calling \code{\link[gamlss:gamlss]{gamlss}}. If \code{stepLength} has a
length that is less than 3 then \code{stepLength} is recycled to have length 3.}

\item{stepAttempts}{A non-negative integer. If the first call to
\code{\link[gamlss:gamlss]{gamlss}} throws an error then we make \code{stepAttempts}
further attempts to fit the model, each time dividing by 2 the values
of \code{mu.step}, \code{sigma.step} and \code{nu.step} supplied to
\code{\link[gamlss:gamlss.control]{gamlss.control}}. If \code{stepAttempts < 1} then
no further attempts are made.}

\item{stepReduce}{A number greater than 1. The factor by which the step
lengths in \code{stepLength} are reduced for each extra attempt to fit the
model. The default, \code{stepReduce = 2} means that the step lengths are
halved for each extra attempt.}

\item{eps}{Argument \code{eps} passed to \code{\link{gevExpInfo}}.}

\item{...}{Further arguments passed to \code{\link[gamlss:gamlss]{gamlss}}, in
particular \code{method}, with options \code{RS()}, \code{CG()} or \code{mixed()}.}

\item{mu.link, sigma.link, xi.link}{Character scalars to set the respective
link functions for the location, scale and shape parameters.}
}
\value{
Returns a gamlss object. See the \strong{Value} section of
\code{\link[gamlss:gamlss]{gamlss}}. The class of the returned object is
\code{c("gamlssx", "gamlss", "gam", "glm", "lm")}.
}
\description{
Describe  \code{\link{GEV}}
}
\details{
Add details. Explain \code{stepAttempts} in more detail.
}
\examples{
# Simulate some data
set.seed(17012023)
n <- 100
x <- stats::runif(n)
mu <- 1 + 2 * x
sigma <- 1
xi <- 0.25
y <- nieve::rGEV(n = 1, loc = mu, scale = sigma, shape = xi)
plot(x, y)
data <- data.frame(y = as.numeric(y), x = x)
library(gamlss)

# Fit model using the default RS method
mod <- fitGEV(y ~ pb(x), data = data)

plot(mod)
plot(data$x, data$y)
lines(data$x, fitted(mod))
fitGEV(y ~ pb(x), data = data)

# Fit model using the mixed method
mod <- fitGEV(y ~ pb(x), data = data, method = mixed())

# Fit model using the CG method
mod <- fitGEV(y ~ pb(x), data = data, method = CG())

# Fremantle data from the ismev package
ismev <- requireNamespace("ismev", quietly = TRUE)

if (ismev) {
  data(fremantle, package = "ismev")
  # Transform Year
  fremantle <- transform(fremantle, cYear = Year - median(Year))

  mod <- fitGEV(SeaLevel ~ pb(SOI), data = fremantle)
  plot(fremantle$SOI, fremantle$SeaLevel)
  lines(fremantle$SOI, fitted(mod))

  mod <- fitGEV(SeaLevel ~ pb(cYear), data = fremantle)
  plot(fremantle$cYear, fremantle$SeaLevel)
  lines(fremantle$cYear, fitted(mod))

  mod <- fitGEV(SeaLevel ~ pb(cYear) + pb(SOI), data = fremantle)
  plot(fremantle$cYear, fremantle$SeaLevel)
  lines(fremantle$cYear, fitted(mod))

  mod <- fitGEV(SeaLevel ~ SOI, data = fremantle)
  plot(fremantle$SOI, fremantle$SeaLevel)
  lines(fremantle$SOI, fitted(mod))

  mod <- fitGEV(SeaLevel ~ cYear, data = fremantle)
  plot(fremantle$cYear, fremantle$SeaLevel)
  lines(fremantle$cYear, fitted(mod))

  mod <- fitGEV(SeaLevel ~ SOI + cYear, data = fremantle)
  plot(fremantle$SOI, fremantle$SeaLevel)
  lines(fremantle$SOI, fitted(mod))
  plot(fremantle$cYear, fremantle$SeaLevel)
  lines(fremantle$cYear, fitted(mod))
}
}
\seealso{
\code{\link{GEV}}, \code{\link[gamlss.dist:gamlss.family]{gamlss.family}},
\code{\link[gamlss:gamlss]{gamlss}}
}
